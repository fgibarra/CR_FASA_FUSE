<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Deploy a Java application using Helm, Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/jAmUyWanu9w/deploy-java-application-using-helm-part-2" /><author><name>Daniel Oh</name></author><id>f993e7fb-e1f9-4530-b015-30e3b8f0a138</id><updated>2021-10-21T07:00:00Z</updated><published>2021-10-21T07:00:00Z</published><summary type="html">&lt;p&gt;In the &lt;a href="https://developers.redhat.com/articles/2021/10/19/deploy-java-application-using-helm-part-1"&gt;previous article&lt;/a&gt; in this series, you learned how to deploy &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; applications to &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (JBoss EAP) using &lt;a href="https://developers.redhat.com/topics/helm/all"&gt;Helm&lt;/a&gt; on &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;. Developers can use the procedures in Part 1 to easily stand up traditional Java application servers on &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; with predefined Kubernetes manifestos.&lt;/p&gt; &lt;p&gt;What if you could have the same benefits when you develop &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; using JBoss EAP and Helm charts? JBoss EAP provides the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/red_hat_jboss_eap_xp_3.0.0_release_notes/index"&gt;Extension Pack&lt;/a&gt; (XP) to implement content trimming, packaging to a bootable JAR, and a &lt;a href="https://microprofile.io/"&gt;MicroProfile&lt;/a&gt; specification including fault tolerance, monitoring, and tracing in support of &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; in the cloud. This article explains how to make a bootable JAR using JBoss EAP XP and Helm and deploy the application to OpenShift.&lt;/p&gt; &lt;h2&gt;Build a bootable JAR with JBoss EAP XP and Helm&lt;/h2&gt; &lt;p&gt;You will use the same &lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts/tree/7.4.x/todo-backend"&gt;Todo backend application&lt;/a&gt; that you deployed in the previous article. At the end of the tutorial, you will have both a traditional enterprise Java application and a bootable JAR for lightweight and independent deployment such as a microservices architecture, using a JBoss EAP XP Helm chart as shown in Figure 1.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Helm charts for JBoss EAP 7.4 are a technology preview feature on OpenShift 4.8, so support is limited when you use these features in production environments.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/process_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/process_0.png?itok=p2Hh-qch" width="1440" height="670" alt="A diagram of the application development process using JBoss EAP, JBoss EAP XP, and a database." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1. Application development process using JBoss EAP, JBoss EAP XP, and a database. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;Installing a JBoss EAP XP Helm chart&lt;/h2&gt; &lt;p&gt;Go to the developer console in Red Hat OpenShift and navigate to the Topology view. You will add the same project (&lt;code&gt;eap-helm-demo&lt;/code&gt;) to OpenShift that you used in the &lt;a href="https://developers.redhat.com/articles/2021/10/19/deploy-java-application-using-helm-part-1#"&gt;previous article&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Click the &lt;strong&gt;Add to Project&lt;/strong&gt; icon on the left side and enter &lt;strong&gt;EAP&lt;/strong&gt; into the search box. Then select the &lt;strong&gt;Eap Xp3 v1.1.0&lt;/strong&gt; Helm chart and click &lt;strong&gt;Install Helm Chart&lt;/strong&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/add_1.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/add_1.png?itok=3iORJMwH" width="1440" height="737" alt="Adding the JBoss EAP XP Helm chart." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2. Adding the JBoss EAP XP Helm chart. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;Now define a specific build, image, and deployment for a bootable Todo back-end application. Switch to the &lt;strong&gt;YAML view&lt;/strong&gt; to add build and deploy configurations, as shown in Figure 3. Use bootable JAR mode with the environment variables required for your &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; data source in your build. Also, set a single runtime using the &lt;code&gt;replicas&lt;/code&gt; field in the &lt;code&gt;deploy&lt;/code&gt; property:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;build: mode: bootable-jar env: - name: MAVEN_ARGS_APPEND value: -am -pl todo-backend -P bootable-jar-openshift - name: POSTGRESQL_DRIVER_VERSION value: '42.2.19' deploy: replicas: 1&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After you add the custom configuration in the YAML configuration, click on the &lt;strong&gt;Install&lt;/strong&gt; button. You can find the entire &lt;a href="https://github.com/jbossas/eap-charts/blob/main/examples/eap-xp3/todo-backend/todo-backend-bootable-jar.yaml"&gt;YAML configuration at the Todo back-end repository&lt;/a&gt;.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/bootable.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/bootable.png?itok=OIylWpW_" width="1404" height="1112" alt="Adding a bootable jar configurations." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3. Adding the bootable JAR configuration. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: You will probably see an &lt;strong&gt;ErrImagePull&lt;/strong&gt; or &lt;strong&gt;ImagePullBackOff&lt;/strong&gt; message in the resources, as shown in Figure 4. Don't worry—your bootable JAR is building successfully, but your deployment will report &lt;strong&gt;ErrImagePull&lt;/strong&gt; and &lt;strong&gt;ImagePullBackOff&lt;/strong&gt; until the build is complete.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/error_1.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/error_1.png?itok=FGh02ws9" width="1440" height="702" alt="ImagePullBackOff during deployment." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 4. ImagePullBackOff during deployment. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;Once the application build is complete, your image is automatically rolled out as shown in Figure 5. Create a connector between the JBoss EAP XP pod (Helm icon) and the PostgreSQL pod via the drag-and-drop feature in the Topology view.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/build_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/build_0.png?itok=eRXqkegX" width="1440" height="701" alt="Successful build and deployment for JBoss EAP XP application." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 5. Successful build and deployment of your JBoss EAP XP application. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;When you click on &lt;strong&gt;Open URL&lt;/strong&gt;, a new web page opens automatically. Copy the route URL for the next step.&lt;/p&gt; &lt;h2&gt;Testing the enterprise Java application&lt;/h2&gt; &lt;p&gt;When the deployment is complete, visit your &lt;a href="https://todobackend.com/client/"&gt;Todo front-end&lt;/a&gt; application by opening a new window in a web browser and pasting in the route URL you copied in the previous step. Then click on the &lt;strong&gt;go&lt;/strong&gt; button shown in Figure 6.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/front_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/front_0.png?itok=KMdjf6wz" width="1440" height="552" alt="To-do front-end GUI." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 6. Todo front-end GUI. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;Now you should be able to add, update, and remove items in the to-do list, as shown in Figure 7.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/list_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/list_0.png?itok=ZAbxRN1J" width="1318" height="706" alt="To-do list." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 7. To-do list. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;What’s next&lt;/h2&gt; &lt;p&gt;This tutorial has shown how to make a bootable JAR with enterprise capabilities (e.g., database transactions) and deploy it to the cloud on Red Hat OpenShift using the JBoss EAP XP Helm chart. You can also define custom runtime environments such as health checks (e.g., &lt;code&gt;livenessProbe&lt;/code&gt;, &lt;code&gt;readinessProbe&lt;/code&gt;) and TLS termination. Then you can upgrade and roll back an existing Helm chart, applying the changes to the running bootable application instantly.&lt;/p&gt; &lt;p&gt;Additional resources:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts/tree/xp-3.0.x"&gt;JBoss EAP XP 3.0.0 Quickstarts&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/using_jboss_eap_xp_3.0.0"&gt;Using MicroProfile with JBoss EAP XP 3.0.0&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/red_hat_jboss_eap_xp_3.0.0_release_notes"&gt;Red Hat JBoss EAP XP 3.0.0 Release Notes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/getting_started_with_jboss_eap_for_openshift_container_platform"&gt;Getting Started with JBoss EAP for OpenShift Container Platform&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/21/deploy-java-application-using-helm-part-2" title="Deploy a Java application using Helm, Part 2"&gt;Deploy a Java application using Helm, Part 2&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/jAmUyWanu9w" height="1" width="1" alt=""/&gt;</summary><dc:creator>Daniel Oh</dc:creator><dc:date>2021-10-21T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/21/deploy-java-application-using-helm-part-2</feedburner:origLink></entry><entry><title>Developer workflows using the VS Code for Java extension 1.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/t7S_bSkcRPU/developer-workflows-using-vs-code-java-extension-10" /><author><name>Mohit Suman, Roland Grunberg</name></author><id>ae98b290-6832-4b18-8de8-c628131aae60</id><updated>2021-10-20T13:00:00Z</updated><published>2021-10-20T13:00:00Z</published><summary type="html">&lt;p&gt;The 1.0 release of &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.java"&gt;Language Support for Java by Red Hat&lt;/a&gt; on Visual Studio Code is now available on VS Code Marketplace. We'd like to take the opportunity to showcase a few workflows that really make it enjoyable to develop &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; applications in Visual Studio Code (VS Code).&lt;/p&gt; &lt;h2&gt;vscode-java 1.0: The one with Java 17&lt;/h2&gt; &lt;p&gt;The extension's 1.0 release supports workflows with Java 17. Released a few weeks ago, Java 17 marks a major point of change in the Java community as many organizations migrate to the latest Java runtime. Here is a short demo around the workflow using the Java extension and Java 17 support:&lt;/p&gt; &lt;div class="video-embed-field-provider-youtube video-embed-field-responsive-video"&gt; &lt;/div&gt; &lt;p&gt;One of the advantages of the &lt;code&gt;vscode-java&lt;/code&gt; extension is that all it takes to start coding is a simple Java source file. There's no need for fancy IDE-specific config files or even build files (such as &lt;code&gt;pom.xml&lt;/code&gt; or &lt;code&gt;build.gradle&lt;/code&gt;) to get a project started.&lt;/p&gt; &lt;p&gt;Let's take an in-depth tour of the Java extension's new features.&lt;/p&gt; &lt;h2&gt;Configuring your Java project&lt;/h2&gt; &lt;p&gt;First, we'll begin by opening VS Code in a folder with just a few Java source files, as shown in Figure 1.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/load-project.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/load-project.png?itok=LwH2ja-7" width="1027" height="702" alt="A screenshot of the project loaded in VS Code." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 1. Loading the project in VS Code.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class="Indent1"&gt;&lt;strong&gt;Note:&lt;/strong&gt; One point worth repeating is that we support pretty much any Java runtime for which we can detect a compatible JDK.&lt;/p&gt; &lt;p&gt;As Figure 2 shows, we have configured Java 8, 11, and 17 environments by providing paths to a compatible JDK installation. Although in this example we have set Java 17 as the default for unmanaged projects, you can easily switch to Java 8 by setting it to &lt;code&gt;default: true&lt;/code&gt;. Once saved, the configuration will take effect. Maven or Gradle projects will have this configured in their build files; &lt;code&gt;vscode-java&lt;/code&gt; can detect and honor those settings.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/java-configuration-runtimes.gif"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/java-configuration-runtimes.gif" width="1024" height="700" alt="An animated graphic showing various Java configuration runtimes." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 2. Java configuration runtimes.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;With a variety of different code actions, it's very easy to quickly get some boilerplate code. You can generate source headers with &lt;code&gt;java.templates.fileHeader&lt;/code&gt; (&lt;strong&gt;File → Preferences → Settings&lt;/strong&gt;), and getters/setters can be auto-generated through code completion. They can also be auto-generated via code actions on the individual fields or class itself, as shown in Figure 3.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/create-class-generate-getset.gif"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/create-class-generate-getset.gif" width="1024" height="700" alt="create-class-generate-getset" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 3. Creating the ​​class to auto-generate getters/setters.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Access references for unnmanaged projects&lt;/h3&gt; &lt;p&gt;Having access to the sources of the libraries you're using is important. While we've always supported this for managed projects (e.g., Maven or Gradle), we now support it for unmanaged projects as well. Simply reference a library from Maven Central, and the sources will be available automatically when interacting with some reference from that library, as shown in Figure 4.&lt;/p&gt; &lt;p&gt;If you want a little more control over your unmanaged project's dependencies, but don’t want to transition to using some build tool, you can use &lt;code&gt;java.project.referencedLibraries&lt;/code&gt; (&lt;strong&gt;File → Preferences → Settings&lt;/strong&gt;). To jump to a particular method definition, you can use the right-click context menu or configure a keyboard shortcut (e.g., the F12 key).&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/source-lookup.gif"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/source-lookup.gif" width="1024" height="700" alt="source-lookup" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 4. Source lookup.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Search for methods&lt;/h3&gt; &lt;p&gt;It's handy to be able to search for your method declarations the same way you might search for a file, especially when you're dealing with a new project or file structure. Rather than searching for a file that has the method we're interested in, we can search for the method directly. Simply enable &lt;code&gt;java.symbols.includeSourceMethodDeclarations&lt;/code&gt; (&lt;strong&gt;File → Preferences → Settings&lt;/strong&gt;).&lt;/p&gt; &lt;h3&gt;Type hierarchy&lt;/h3&gt; &lt;p&gt;The Java extension also now supports type hierarchy. This feature is accessible from the right-click context menu, but you can also easily configure it as a keyboard shortcut, as shown as Figure 5.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/source-method-lookup-type-hierarchy.gif"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/source-method-lookup-type-hierarchy.gif" width="1024" height="700" alt="source-method-lookup-type-hierarchy." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 5. Source method lookup type hierarchy.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Run and debug&lt;/h3&gt; &lt;p&gt;In order to take advantage of run and debug capabilities, you'll need to install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug"&gt;&lt;code&gt;vscode-java-debug&lt;/code&gt;&lt;/a&gt; extension from the Visual Studio Code Marketplace.&lt;/p&gt; &lt;p&gt;The Debugger for Java extension lets you run and debug the project in many different ways. For simple projects, you can enable &lt;code&gt;java.debug.settings.enableRunDebugCodeLens&lt;/code&gt; (&lt;strong&gt;File → Preferences → Settings&lt;/strong&gt;), and use CodeLens directly from the main method.&lt;/p&gt; &lt;p&gt;You can set breakpoints, inspect and modify variable values, and even interact with the program from the Debug Console, as shown in Figure 6.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/run-debug.gif"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/run-debug.gif" width="1024" height="700" alt="run-debug" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 6. Run and debug.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Future roadmap&lt;/h2&gt; &lt;p&gt;There are many items planned for the Java language support in VS Code. Some of these include:&lt;/p&gt; &lt;ul&gt;&lt;li aria-level="1"&gt;Making it easier to configure compiler error/warnings and code formatting options.&lt;/li&gt; &lt;li aria-level="1"&gt;Adding useful auto-completion features (such as Postfix completion).&lt;/li&gt; &lt;li aria-level="1"&gt;Continuing to adopt convenient code actions (new Java language features, for example) and eventually reach feature parity with those provided by the Eclipse Java IDE.&lt;/li&gt; &lt;li aria-level="1"&gt;Improving the language server's initial startup time and overall performance.&lt;/li&gt; &lt;li aria-level="1"&gt;Embedding a Java runtime to improve the "Getting Started" experience.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Testimonials&lt;/h2&gt; &lt;p&gt;"For me, VS Code for Java is the easiest way to get started with a Java project. It doesn't matter if you're starting from scratch or you need to quickly open an existing project—VSCode for Java is blazingly fast and small. It will work fast even on older machines, and it has all the features you need to be productive when developing Java projects, from old versions of Java up to the latest version: 17!"&lt;/p&gt; &lt;p class="Indent1"&gt;—Edson Yanaga, Java Champion and Microsoft MVP, Director of Developer Experience, Red Hat&lt;/p&gt; &lt;p&gt;"&lt;code&gt;vscode-java&lt;/code&gt; makes Visual Studio code a fast and lean way to edit Java projects. I can start and stop the editor on any project, small or large, in no time. This makes it a great tool to use as both my primary and secondary IDE while working on JBang and Quarkus projects."&lt;/p&gt; &lt;p class="Indent1"&gt;—Max Rydahl Andersen, Distinguished Engineer, Red Hat&lt;/p&gt; &lt;p&gt;"Visual Studio Code and its &lt;code&gt;vscode-java&lt;/code&gt; extension have become my go-to solution for a quick and lightweight code exploration and editing experience. Whether it's for examining pull requests, diving into a new code base, or a live demo during a conference talk, &lt;code&gt;vscode-java&lt;/code&gt; allows me to work with Java code intuitively and efficiently, providing all the goodies you'd expect from your coding workbench, like code navigation, refactoring support, instant feedback in case of failures, etc. Part of the VSCode extension pack for Java, &lt;code&gt;vscode-java&lt;/code&gt; integrates seamlessly with other extensions like the Java debugger and test runner, as well as features like remote development via SSH, making it an invaluable part of my Java toolbox."&lt;/p&gt; &lt;p class="Indent1"&gt;—Gunnar Morling, Java Champion, Principal Software Engineer, Red Hat&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;&lt;a href="https://github.com/redhat-developer/vscode-java#quick-start"&gt;Check out our Quick Start guide&lt;/a&gt; to get started building Java applications using Visual Studio Code. Obviously, 1.0.0 is not the endgame. Development continues, so you can look forward to more goodies—there's a big one coming in the near future.&lt;/p&gt; &lt;h3&gt;Give us your feedback&lt;/h3&gt; &lt;p&gt;We would love️ to hear what you think about the Java extension. As always, your feedback is critical to our product improvement.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Have a question? Start a discussion on &lt;a href="https://github.com/redhat-developer/vscode-java/discussions"&gt;GitHub Discussions&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;File a bug in &lt;a href="https://github.com/redhat-developer/vscode-java/issues"&gt;GitHub Issues&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Chat with us on &lt;a href="https://gitter.im/redhat-developer/vscode-java"&gt;Gitter&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Find us on Twitter at &lt;a href="https://twitter.com/VSCodeJava/"&gt;@VSCodeJava&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/20/developer-workflows-using-vs-code-java-extension-10" title="Developer workflows using the VS Code for Java extension 1.0"&gt;Developer workflows using the VS Code for Java extension 1.0&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/t7S_bSkcRPU" height="1" width="1" alt=""/&gt;</summary><dc:creator>Mohit Suman, Roland Grunberg</dc:creator><dc:date>2021-10-20T13:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/20/developer-workflows-using-vs-code-java-extension-10</feedburner:origLink></entry><entry><title>Multipath TCP on RHEL 8: From one to many subflows</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/kqc2959sKqk/multipath-tcp-rhel-8-one-many-subflows" /><author><name>Andrea Claudi</name></author><id>6424f1ed-b72a-4261-a3e1-a684dbe4f5b0</id><updated>2021-10-20T07:00:00Z</updated><published>2021-10-20T07:00:00Z</published><summary type="html">&lt;p&gt;Many years ago, Hercules was traveling back to Athens when he lost his way in a wood. Arriving at a crossroad, he found two women. One of them was Aletheia, the goddess of truth, and the other was Apate, the goddess of lies. But he didn't know who was who. Hercules needed all his intelligence to find the only question capable of revealing the way to Athens.&lt;/p&gt; &lt;p&gt;If you are lost in a computer network and don't know which path to take, don't worry—you don't need Hercules to find your way: You can use Multipath TCP.&lt;/p&gt; &lt;h2&gt;Multipath TCP in Red Hat Enterprise Linux 8&lt;/h2&gt; &lt;p&gt;Multipath TCP (MPTCP) is an extension to the Transmission Control Protocol (TCP) to &lt;a href="https://www.rfc-editor.org/info/rfc8684"&gt;use multiple paths between peers simultaneously&lt;/a&gt;. &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Linux&lt;/a&gt;'s MPTCP implementation is fairly recent and was included in version 5.6. &lt;a href="https://developers.redhat.com/products/rhel"&gt;Red Hat Enterprise Linux&lt;/a&gt; includes MPTCP starting with version 8.3.&lt;/p&gt; &lt;p&gt;In the &lt;a href="https://developers.redhat.com/blog/2020/08/19/multipath-tcp-on-red-hat-enterprise-linux-8-3-from-0-to-1-subflows"&gt;first part of this series&lt;/a&gt;, &lt;a&gt;Davide Caratti&lt;/a&gt; showed how to enable MPTCP, open an MPTPC socket in an application, and verify that MPTCP is working as expected. You can follow his tutorial to start experimenting with MPTCP.&lt;/p&gt; &lt;p&gt;In this article, you will learn how to:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Use &lt;code&gt;iproute2&lt;/code&gt; to add multiple subflows to an MPTCP connection.&lt;/li&gt; &lt;li&gt;Verify that MPTCP uses multiple subflows.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Opening an MPTCP socket&lt;/h2&gt; &lt;p&gt;To see MPTCP in action, you need to open an MPTCP socket from a user-space application. Let's follow the instructions from the &lt;a href="m/blog/2020/08/19/multipath-tcp-on-red-hat-enterprise-linux-8-3-from-0-to-1-subflows"&gt;first article of this series&lt;/a&gt; to set up a multiple subflow testbed.&lt;/p&gt; &lt;p&gt;First of all, because MPTCP is disabled in the default Red Hat Enterprise Linux configuration, you need to enable it using &lt;code&gt;sysctl&lt;/code&gt; so you can create MPTCP sockets:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# sysctl -w net.mptcp.enabled=1 # sysctl net.mptcp.enabled net.mptcp.enabled = 1&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;MPTCP sockets are the same as the regular TCP sockets and use the same semantics. An application can natively add support to MPTCP using a socket with &lt;code&gt;IPPROTO_MPTCP&lt;/code&gt; like this:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;fd = socket(AF_INET, SOCK_STREAM, IPPROTO_MPTCP);&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Implementing a full-fledged MPTCP application is not difficult, but what if you want to use a normal user-space application without any knowledge of &lt;code&gt;IPPROTO_MPTCP&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Fear not: There are multiple paths to avoid patching and rebuilding all networking applications. The easiest path is probably to use &lt;code&gt;systemtap&lt;/code&gt; to replace &lt;code&gt;IPPROTO_TCP&lt;/code&gt; with &lt;code&gt;IPPROTO_MPTCP&lt;/code&gt; in all the calls to &lt;code&gt;__sys_socket()&lt;/code&gt; in the kernel. To make the replacement, you need to install a few packages:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ dnf -y install \ kernel-headers \ kernel-devel \ kernel-debuginfo \ kernel-debuginfo-common-x86_64 \ systemtap-client \ systemtap-devel&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-multipath-tcp_configuring-and-managing-networking"&gt;download the &lt;code&gt;systemtap&lt;/code&gt; script from this guide&lt;/a&gt; and use the following command to start it:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# stap -vg mpctp.stap&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Verify that the &lt;code&gt;systemtap&lt;/code&gt; script is working by looking at the output from &lt;code&gt;dmesg&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# dmesg ... [1114254.601040] Kprobes globally unoptimized [1114254.611265] stap_d60b4bc4e0332aa247ebd9b2ffa597_213373: module_layout: kernel tainted. [1114254.620296] Disabling lock debugging due to kernel taint [1114254.626423] stap_d60b4bc4e0332aa247ebd9b2ffa597_213373: loading out-of-tree module taints kernel. [1114254.636597] stap_d60b4bc4e0332aa247ebd9b2ffa597_213373: module verification failed: signature and/or required key missing - tainting kernel [1114254.680368] stap_d60b4bc4e0332aa247ebd9b2ffa597_213373 (mptcp.stap): systemtap: 4.4/0.182, base: ffffffffc1082000, memory: 224data/32text/15ctx/24678net/202alloc kb, probes: 1&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Setting up the testbed&lt;/h2&gt; &lt;p&gt;As a simple test setup, we will use two network namespaces, &lt;code&gt;mptcp-client&lt;/code&gt; and &lt;code&gt;mptcp-server&lt;/code&gt;, to simulate the client and the server in an MPTCP connection. The two namespaces will be connected by two different virtual Ethernet (veth) paths: From 10.0.0.1 to 10.0.0.2 and from 192.168.0.1 to 192.168.0.2 (Figure 1).&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/setup.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/setup.png?itok=BSlJ5b7u" width="794" height="220" alt="Network topology for MPTCP two-stream test. In this setup, 10.0.0.1 on the server communicates with 10.0.0.2 on the client, and 192.168.0.1 on the server communicates with 192.168.0.2 on the client." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: Network topology for two-path MPTCP test. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;You can use the following script to set up the testbed:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;#!/bin/sh ip netns add mptcp-client ip netns add mptcp-server sysctl -w net.ipv4.conf.all.rp_filter=0 ip netns exec mptcp-client sysctl -w net.mptcp.enabled=1 ip netns exec mptcp-server sysctl -w net.mptcp.enabled=1 ip link add red-client netns mptcp-client type veth peer red-server netns mptcp-server ip link add blue-client netns mptcp-client type veth peer blue-server netns mptcp-server ip -n mptcp-server address add 10.0.0.1/24 dev red-server ip -n mptcp-server address add 192.168.0.1/24 dev blue-server ip -n mptcp-client address add 10.0.0.2/24 dev red-client ip -n mptcp-client address add 192.168.0.2/24 dev blue-client ip -n mptcp-server link set red-server up ip -n mptcp-server link set blue-server up ip -n mptcp-client link set red-client up ip -n mptcp-client link set blue-client up&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can verify that your setup is working as expected by following the instructions &lt;a href="https://developers.redhat.com/blog/2020/08/19/multipath-tcp-on-red-hat-enterprise-linux-8-3-from-0-to-1-subflows"&gt;in the first part of this series&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Working with multiple paths&lt;/h2&gt; &lt;p&gt;Now that you have MPTCP working on a single path, it's time to take multiple paths.&lt;/p&gt; &lt;p&gt;First, instruct the kernel to set up multiple MPTCP subflows. &lt;code&gt;iproute2&lt;/code&gt; provides a handy &lt;code&gt;mptcp&lt;/code&gt; command that can help you:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# ip -n mptcp-server mptcp endpoint flush # ip -n mptcp-server mptcp limits set subflow 2 add_addr_accepted 2 # ip -n mptcp-client mptcp endpoint flush # ip -n mptcp-client mptcp limits set subflow 2 add_addr_accepted 2 # ip -n mptcp-client mptcp endpoint add 192.168.0.2 dev blue-client id 1 subflow&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These commands configure the MPTCP server to accept up to two different subflows and then add a second subflow to the client. To verify that everything is configured as expected, use &lt;code&gt;iproute2&lt;/code&gt; again:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# ip -n mptcp-server mptcp limit show add_addr_accepted 2 subflows 2 # ip -n mptcp-client mptcp limit show add_addr_accepted 2 subflows 2 # ip -n mptcp-client mptcp endpoint show 192.168.0.2 id 1 subflow dev blue-client&lt;/code&gt; &lt;/pre&gt; &lt;p&gt;Now you are ready to use subflows. To test them, you can use &lt;code&gt;ncat&lt;/code&gt;. The following command starts an &lt;code&gt;ncat&lt;/code&gt; server instance on the &lt;code&gt;mptcp-server&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;code&gt;# ip netns exec mptcp-server ncat -k -4 -i 30 -c "sleep 60" -C -o /tmp/server -l 0.0.0.0 4321 &amp;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Next, the following command sends a "hello world!" message to the server from the &lt;code&gt;mptcp-client&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ip netns exec mptcp-client ncat -c "echo hello world!" 10.0.0.1 4321&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;code&gt;tcpdump&lt;/code&gt;, you can verify that there are two different three-way handshakes from different interfaces:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# tcpdump --number -tnnr /tmp/mptcp.pcap reading from file /tmp/mptcp.pcap, link-type LINUX_SLL (Linux cooked v1) dropped privs to tcpdump 1  IP 10.0.0.2.43474 &gt; 10.0.0.1.4321: Flags [S], seq 908898843, win 29200, options [mss 1460,sackOK,TS val 3701631927 ecr 0,nop,wscale 7,mptcp capable[bad opt]&gt; 2  IP 10.0.0.1.4321 &gt; 10.0.0.2.43474: Flags [S.], seq 3314791626, ack 908898844, win 28960, options [mss 1460,sackOK,TS val 3198006599 ecr 3701631927,nop,wscale 7,mptcp capable Unknown Version (1)], length 0 3  IP 10.0.0.2.43474 &gt; 10.0.0.1.4321: Flags [.], ack 1, win 229, options [nop,nop,TS val 3701631927 ecr 3198006599,mptcp capable Unknown Version (1)], length 0 4  IP 10.0.0.2.43474 &gt; 10.0.0.1.4321: Flags [P.], seq 1:14, ack 1, win 229, options [nop,nop,TS val 3701631928 ecr 3198006599,mptcp capable[bad opt]&gt; 5  IP 10.0.0.1.4321 &gt; 10.0.0.2.43474: Flags [.], ack 14, win 227, options [nop,nop,TS val 3198006600 ecr 3701631928,mptcp dss ack 3158259848540329265], length 0 6  IP 192.168.0.2.36423 &gt; 10.0.0.1.4321: Flags [S], seq 2791202022, win 29200, options [mss 1460,sackOK,TS val 1604001975 ecr 0,nop,wscale 7,mptcp join id 1 token 0xc0715389 nonce 0xcae83dcb], length 0 7  IP 10.0.0.1.4321 &gt; 192.168.0.2.36423: Flags [S.], seq 637604674, ack 2791202023, win 28960, options [mss 1460,sackOK,TS val 511057212 ecr 1604001975,nop,wscale 7,mptcp join id 0 hmac 0x465e4bf08492bb0c nonce 0x47d18eca], length 0 8  IP 10.0.0.2.43474 &gt; 10.0.0.1.4321: Flags [.], ack 1, win 229, options [nop,nop,TS val 3701631928 ecr 3198006600,mptcp dss fin ack 641236127 seq 3158259848540329265 subseq 0 len 1,nop,nop], length 0 9  IP 10.0.0.1.4321 &gt; 10.0.0.2.43474: Flags [.], ack 14, win 227, options [nop,nop,TS val 3198006600 ecr 3701631928,mptcp dss ack 3158259848540329266], length 0 10  IP 10.0.0.2.43474 &gt; 10.0.0.1.4321: Flags [F.], seq 14, ack 1, win 229, options [nop,nop,TS val 3701631928 ecr 3198006600,mptcp dss ack 641236127], length 0 11  IP 10.0.0.1.4321 &gt; 10.0.0.2.43474: Flags [.], ack 15, win 227, options [nop,nop,TS val 3198006641 ecr 3701631928,mptcp dss ack 3158259848540329266], length 0&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Indeed, a first three-way handshake takes place with packets 1-3 on the 10.0.0.* path, while a second handshake kicks in with packets 6-8 on the 192.168.0.* path (note the S flag for SYN and the S. for SYN/ACK).&lt;/p&gt; &lt;h2&gt;Tired of manual subflows? mptcpd to the rescue&lt;/h2&gt; &lt;p&gt;By now you are probably tired of having to manually specify endpoints and subflows for each new test you want to do. Luckily, this is not the only way to use MPTCP endpoints.&lt;/p&gt; &lt;p&gt;Linux kernel version 5.11 is able to send &lt;code&gt;netlink&lt;/code&gt; notifications to user space when the kernel receives an &lt;code&gt;add address netlink&lt;/code&gt; command. A small user-space application, &lt;code&gt;mptpcd&lt;/code&gt;, can tap into these notifications to provide a path management mechanism to user space and control MPTCP behavior. &lt;code&gt;mptpcd&lt;/code&gt; will be available with RHEL 9.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In the end, Hercules managed to find his way to Athens by simply asking one of the goddesses which path the other goddess would tell him to use. He chose the other path and quickly returned to Athens.&lt;/p&gt; &lt;p&gt;With MPTCP, you don't need to solve path riddles anymore: You can ask for multiple roads and take them all together to head where you need to go.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/20/multipath-tcp-rhel-8-one-many-subflows" title="Multipath TCP on RHEL 8: From one to many subflows"&gt;Multipath TCP on RHEL 8: From one to many subflows&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/kqc2959sKqk" height="1" width="1" alt=""/&gt;</summary><dc:creator>Andrea Claudi</dc:creator><dc:date>2021-10-20T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/20/multipath-tcp-rhel-8-one-many-subflows</feedburner:origLink></entry><entry><title type="html">Local to global – Using LIME for feature importance</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/yLKyhae1xnk/local-to-global-using-lime-for-feature-importance.html" /><author><name>Tommaso Teofili</name></author><id>http://feeds.athico.com/~r/droolsatom/~3/0Klljd4XoLE/local-to-global-using-lime-for-feature-importance.html</id><updated>2021-10-20T06:56:19Z</updated><content type="html">In a previous we have discussed how to leverage LIME to get more insights about specific predictions generated by a black box decision service. In fact LIME is mostly used to find out which input features where most important for the generation of a particular output, according to that decision service. Such explanations are called local because they refer to the behavior of a decision service locally, with respect to a certain, specified input. In this post we’ll see how to use TrustyAI LimeExplainer in order to generate an explanation for a decision service "as a whole". One such explanation kind is called feature importance. Such explanations help users understand the overall importance of each input feature on a global scale, more informally they answer the question "what does this decision service gives more importance to when taking decisions, generally?". A very simple idea to generalize local LIME explanations to get global feature importance is to obtain local predictions for a large number of predictions and then average the scores assigned to each feature across all the local explanations to produce a global explanation. You can do this with TrustyAI AggregatedLimeExplainer. AggregatedLimeExplainer globalExplainer = new AggregatedLimeExplainer(); Of course we need to have access to the decision service we want to explain, exposed as usually in TrustyAI via a PredictionProvider. For the sake of this post we want to explain a PMML regression model trained on the . We define a getModel() method that wraps such a model as a PredictionProvider. PredictionProvider getModel() { return inputs -&gt; CompletableFuture.supplyAsync(() -&gt; { List&lt;PredictionOutput&gt; outputs = new ArrayList&lt;&gt;(); for (PredictionInput input1 : inputs) { List&lt;Feature&gt; features1 = input1.getFeatures(); LogisticRegressionIrisDataExecutor pmmlModel = new LogisticRegressionIrisDataExecutor( features1.get(0).getValue().asNumber(), features1.get(1).getValue().asNumber(), features1.get(2).getValue().asNumber(), features1.get(3).getValue().asNumber()); PMML4Result result = pmmlModel.execute(logisticRegressionIrisRuntime); String species = result.getResultVariables().get("Species").toString(); double score = Double.parseDouble( result.getResultVariables().get("Probability_" + species).toString()); PredictionOutput predictionOutput = new PredictionOutput(List.of(new Output("species", Type.TEXT, new Value(species), score))); outputs.add(predictionOutput); } return outputs; }); } We feed such an explainer with a collection of existing predictions in order to get our feature importance explanation. List&lt;PredictionInput&gt; samples = getSamples(); List&lt;PredictionOutput&gt; predictionOutputs = model.predictAsync(samples).get(); List&lt;Prediction&gt; predictions = DataUtils.getPredictions(samples, predictionOutputs); The getSamples() method can fetch samples from the Iris training, validation or test sets, or evantually generate random samples. At this point we can get our global explanation from the AggregatedLimeExplainer. Map&lt;String, Saliency&gt; saliencyMap = globalExplainer.explainFromPredictions(model, predictions).get(Config.INSTANCE.getAsyncTimeout(), Config.INSTANCE.getAsyncTimeUnit()); You might have noticed that the explanation API is async, so we supply also information about when to eventually timeout the execution. Let’s print what is the mean LIME score for each of the four features on the PMML regression model. for (Saliency saliency : saliencyMap.values()) { for (FeatureImportance fi : saliency.getPerFeatureImportance()) { System.out.println(fi.getFeature().getName()+": "+fi.getScore()); } } petalLength: 8.674779230045368E-5 petalWidth: 8.68437473088059E-5 sepalLength: 8.674876155890406E-5 sepalWidth: 8.673110128646624E-5 The model seems to distribute the importance very fairly among the four features, with a slightly higher importance on the petalWidth feature. Length related features seem to have almost the exact same importance instead, that’s interesting! Global explanations tools are very useful to get insights about the inner workings of ML models, AI systems or more generally about black box decision services. Such insights can be used, for example, by a data scientist to check whether the importance assigned by decision services is inline with the design of such models, or if there are unwanted or unexpected such behviors. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/yLKyhae1xnk" height="1" width="1" alt=""/&gt;</content><dc:creator>Tommaso Teofili</dc:creator><feedburner:origLink>http://feeds.athico.com/~r/droolsatom/~3/0Klljd4XoLE/local-to-global-using-lime-for-feature-importance.html</feedburner:origLink></entry><entry><title type="html">Red Hat Summit Connect Dublin - Talking Architecture Shop</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EKe5AbeSmM4/red-hat-summit-connect-dublin-talking-architecture-shop.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/MZRHiGfq1wk/red-hat-summit-connect-dublin-talking-architecture-shop.html</id><updated>2021-10-20T05:00:00Z</updated><content type="html">The is a one day event,  part of a new series of small-scale events, that brings the discussion of open source technology to your local cities.  The day provides updates and insights into the latest technologies and will also offer the opportunity to get hands on with Red Hat technologies.  There will be different streams of session topics that will host tech talks led by Red Hat experts and also business focused sessions delivered from industry leaders including some fantastic partner and customer stories. I've been invited to give a session in Dublin and wanted to share the planning with you for this event in November.  At the Red Hat Summit Connect in Dublin will be hosted at: Date: Thursday 11 November 2021 Time: 10am-6pm GMT Location: The Convention Centre Dublin, Spencer Dock, North Wall Quay, Dublin 1, D01 T1W6, Ireland I've been asked to share my insights into some of our larger architectures and explore how open source can be used at scale, so I'm putting together the following session for you. You've heard of large scale open source architectures, but have you ever wanted to take a serious look at these real life enterprise implementations that scale? This session takes attendees on a tour of multiple use cases covering enterprise challenges like integration, optimisation, cloud adoption, hybrid cloud management, and much more. Not only are these architectures interesting, but they are successful real life implementations featuring open source technologies and power many of your own online experiences. The attendee departs this session with a working knowledge of how to map general open source technologies to their solutions. Material covered is available freely online and attendees can use these solutions as starting points for aligning to their own solution architectures. Join us for an hour of power as we talk architecture shop!  Time: 16:30-17:00 (local time) and hope to see you there!&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EKe5AbeSmM4" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/MZRHiGfq1wk/red-hat-summit-connect-dublin-talking-architecture-shop.html</feedburner:origLink></entry><entry><title>Quarkus 2.3.1.Final released - Maintenance release</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sF5V2W-Uahw/" /><author><name>Guillaume Smet (https://twitter.com/gsmet_)</name></author><id>https://quarkus.io/blog/quarkus-2-3-1-final-released/</id><updated>2021-10-20T00:00:00Z</updated><published>2021-10-20T00:00:00Z</published><summary type="html">Today, we released Quarkus 2.3.1.Final, a maintenance release for our 2.3 release train containing bugfixes and documentation improvements. It is a safe upgrade for anyone already using 2.3. If you are not using 2.3 already, please refer to the 2.3 migration guide. Full changelog You can get the full changelog...&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sF5V2W-Uahw" height="1" width="1" alt=""/&gt;</summary><dc:creator>Guillaume Smet (https://twitter.com/gsmet_)</dc:creator><dc:date>2021-10-20T00:00:00Z</dc:date><feedburner:origLink>
                https://quarkus.io/blog/quarkus-2-3-1-final-released/
            </feedburner:origLink></entry><entry><title>Deploy a Java application using Helm, Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/a6OEpe24wmk/deploy-java-application-using-helm-part-1" /><author><name>Daniel Oh</name></author><id>c12f09fc-4347-4f4a-8981-480ebfffc57f</id><updated>2021-10-19T07:00:00Z</updated><published>2021-10-19T07:00:00Z</published><summary type="html">&lt;p&gt;To deploy &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;enterprise Java&lt;/a&gt; applications with &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform (EAP)&lt;/a&gt; servers to &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;, developers have usually needed to learn how to use OpenShift &lt;a href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.8/html/images/using-templates"&gt;templates&lt;/a&gt; or &lt;a href="https://developers.redhat.com/topics/kubernetes/operators"&gt;Operators&lt;/a&gt; to specify &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; and OpenShift resources such as build config, deployment, volume, environment variables, and application image. This article, the first of a two-part series, explains a simpler way to deploy an enterprise Java application to OpenShift using &lt;a href="https://developers.redhat.com/topics/helm/all"&gt;Helm&lt;/a&gt; charts, and how to connect the application to a &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; database.&lt;/p&gt; &lt;h2&gt;Helm: Simplifying application deployment on Kubernetes&lt;/h2&gt; &lt;p&gt;Deployment practices are not familiar to application developers because resource definition has traditionally been determined by the IT operations team. When moving rapidly into the &lt;a href="https://developers.redhat.com/topics/devops"&gt;DevOps&lt;/a&gt; era, developers need to take more responsibility to set appropriate resources in alignment with cloud &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To solve these problems for developers, Helm was designed to simplify application deployment on Kubernetes. Helm is a software package manager similar to the &lt;a href="https://fedoraproject.org/wiki/DNF"&gt;DNF package manager&lt;/a&gt; in Fedora and the &lt;a href="https://devblogs.microsoft.com/commandline/windows-package-manager-1-0/"&gt;Windows Package Manager&lt;/a&gt;. Package managers allow developers to install software tools and maintain them (e.g., upgrade, delete, and patch) quickly using a command-line interface or graphical user interface (GUI).&lt;/p&gt; &lt;p&gt;Developers can install a particular collection of files representing Kubernetes resources by using a Helm chart. When the chart is installed, it is managed by a release. The developer can delete or upgrade the release on demand to make application deployment changes.&lt;/p&gt; &lt;p&gt;OpenShift also supports a Helm chart to deploy applications with multiple runtime environments, including JBoss EAP. Developers can select and install a Helm chart from OpenShift's developer perspective. Then they can upgrade, roll-back, and uninstall an existing Helm chart (release) during the application lifecycle.&lt;/p&gt; &lt;p&gt;At the end of this article, you will have a traditional enterprise Java application running on clustered JBoss EAP servers that connect to a &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; database using the JBoss EAP Helm chart, as shown in Figure 1.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Helm charts for JBoss EAP 7.4 are a technology preview feature on OpenShift 4.8, so support is limited when you use these features in production environments.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/process.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/process.png?itok=Pee8v1RB" width="1440" height="381" alt="Application Development process using JBoss EAP and a PostgreSQL" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1. Application development process using JBoss EAP and a database. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;Installing a JBoss EAP Helm chart&lt;/h2&gt; &lt;p&gt;Go to the developer console in OpenShift and navigate to the Topology view. Create a new project named &lt;code&gt;eap-helm-demo&lt;/code&gt; by clicking the &lt;strong&gt;Add to Project&lt;/strong&gt; icon on the left top and entering &lt;code&gt;EAP&lt;/code&gt; into the search box. Then select the &lt;strong&gt;Eap74 v1.1.0&lt;/strong&gt; Helm chart and click &lt;strong&gt;Install Helm Chart&lt;/strong&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/add_chart.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/add_chart.png?itok=3fLDPvFC" width="1440" height="747" alt="Adding the JBoss EAP 7.4 Helm chart" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2. Adding the JBoss EAP 7.4 Helm chart. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;Now define a specific build, image, and deployment for an example &lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts/tree/7.4.x/todo-backend"&gt;Todo back-end application&lt;/a&gt;. Switch to the &lt;strong&gt;YAML view&lt;/strong&gt; to add &lt;a href="https://docs.openshift.com/container-platform/4.7/openshift_images/using_images/using-s21-images.html"&gt;Source-to-Image (S2I)&lt;/a&gt; build and deploy configurations, as shown in Figure 3.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/build.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/build.png?itok=sD6YRucf" width="1440" height="960" alt="Adding the S2I configurations" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3. Adding the S2I configurations. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;JBoss EAP 7.4 provides a &lt;a href="https://developers.redhat.com/blog/2020/04/10/jboss-eap-7-3-brings-new-packaging-capabilities"&gt;galleon feature pack&lt;/a&gt; to add data sources, content trimming, and &lt;a href="https://microprofile.io/"&gt;MicroProfile&lt;/a&gt; specifications for enterprise Java applications. Three feature packs (&lt;code&gt;cloud-server&lt;/code&gt;, &lt;code&gt;postgresql-datasource&lt;/code&gt;, and &lt;code&gt;ejb&lt;/code&gt;) are installed while the S2I build runs. The following snippet shows how you can define S2I mode with a galleon feature pack for a PostgreSQL data source in the build section, as well as how to set the clustered servers (with three replicas) in the deploy section:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;build: mode: s2i s2i: featurePacks: - org.jboss.eap:eap-datasources-galleon-pack:7.4.0.GA-redhat-00003 galleonLayers: cloud-server,postgresql-datasource,ejb env: - name: ARTIFACT_DIR value: todo-backend/target deploy: replicas: 3&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Click the &lt;strong&gt;Install&lt;/strong&gt; button after you add the custom configuration to the YAML file. You can find the entire &lt;a href="https://github.com/jbossas/eap-charts/blob/main/examples/eap74/todo-backend/todo-backend-s2i.yaml"&gt;YAML configuration at the Todo back-end repository&lt;/a&gt;.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: You will probably see an &lt;strong&gt;ErrImagePull&lt;/strong&gt; or &lt;strong&gt;ImagePullBackOff&lt;/strong&gt; message in the resources, as shown in Figure 4. No worries—your JBoss EAP 7.4 application is building successfully, but your deployment will report &lt;strong&gt;ErrImagePull&lt;/strong&gt; and &lt;strong&gt;ImagePullBackOff&lt;/strong&gt; until the build is complete.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/error_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/error_0.png?itok=L23ohoqX" width="1440" height="805" alt="ErrImagePull during deployment" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 4. ErrImagePull during deployment. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;Deploying a PostgreSQL database&lt;/h2&gt; &lt;p&gt;Let’s now deploy a new PostgreSQL database to communicate with the JBoss EAP servers. Right-click on the Topology view, then select &lt;strong&gt;Database&lt;/strong&gt; in the pop-up menu. Next, enter &lt;code&gt;postgres&lt;/code&gt; into the search box and click on the &lt;strong&gt;PostgreSQL (Ephemeral)&lt;/strong&gt; template, as shown in Figure 5.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/postgres.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/postgres.png?itok=g-yUu5Lw" width="1440" height="795" alt="Creating a PostgreSQL database from the OpenShift console" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 5. Creating a PostgreSQL database from the OpenShift console. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;Click &lt;strong&gt;Instantiate Template&lt;/strong&gt; and fill in the following fields, as shown in Figure 6, leaving the other fields at their default values.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Database Service Name&lt;/strong&gt;: &lt;code&gt;todos-db&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;PostgreSQL Connection Username&lt;/strong&gt;: &lt;code&gt;todos-db&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;PostgreSQL Connection Password&lt;/strong&gt;: &lt;code&gt;todos-db&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;PostgreSQL Database Name&lt;/strong&gt;: &lt;code&gt;todos-db&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Then click &lt;strong&gt;Create&lt;/strong&gt;, as shown in Figure 6.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/config.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/config.png?itok=Wtu3_4TB" width="896" height="1124" alt="Key values in the PostgreSQL template" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 6. PostgreSQL configuration in the "Instantiate Template" screen. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;Once the application build is complete, your image is automatically rolled out as shown in Figure 7. Create a connector between the JBoss EAP pod and the PostgreSQL pod via the drag-and-drop feature in the Topology view.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/deployment_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/deployment_0.png?itok=ZhRx4hnt" width="600" height="298" alt="Successful build and deployment for JBoss EAP application and PostgreSQL" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 7. Successful build and deployment of your JBoss EAP application and PostgreSQL database. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;When you click &lt;strong&gt;Open URL&lt;/strong&gt;, a new web page opens automatically. Copy the route URL for the next step.&lt;/p&gt; &lt;h2&gt;Testing the enterprise Java application&lt;/h2&gt; &lt;p&gt;When the deployment is complete, visit your &lt;a href="https://todobackend.com/client/"&gt;Todo front-end&lt;/a&gt; application by opening a new window in a web browser and pasting in the route URL you copied in the previous step. Then click the &lt;strong&gt;go&lt;/strong&gt; button shown in Figure 8.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/front.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/front.png?itok=GUQmo3bW" width="1440" height="579" alt="Todo front-end GUI" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 8. Todo front-end GUI. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;Now you should be able to add, update, and remove items in the to-do list, as shown in Figure 9.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/list.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/list.png?itok=ZfUtqnqe" width="1440" height="1122" alt="To-do list" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 9. To-do list. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;What’s next&lt;/h2&gt; &lt;p&gt;This article has shown how to deploy traditional enterprise Java applications to the cloud on Red Hat OpenShift using a Helm chart. The JBoss EAP Helm chart lets Java developers specify the application runtime environment on JBoss EAP in terms of build strategy, source repository, galleon feature packs, and server replication (clustering). The procedures shown in this article are much easier for developers than using OpenShift templates or Kubernetes Operators.&lt;/p&gt; &lt;p&gt;The next article in this series walks you through how to make this application a bootable JAR using JBoss EAP Extension Pack (XP) with a Helm chart.&lt;/p&gt; &lt;p&gt;Additional resources:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts/tree/7.4.x"&gt;JBoss EAP Quickstarts&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/getting_started_with_jboss_eap_for_openshift_container_platform"&gt;Getting Started with JBoss EAP for OpenShift Container Platform&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/development_guide"&gt;Instructions for developing Jakarta EE applications for Red Hat JBoss Enterprise Application Platform&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/19/deploy-java-application-using-helm-part-1" title="Deploy a Java application using Helm, Part 1"&gt;Deploy a Java application using Helm, Part 1&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/a6OEpe24wmk" height="1" width="1" alt=""/&gt;</summary><dc:creator>Daniel Oh</dc:creator><dc:date>2021-10-19T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/19/deploy-java-application-using-helm-part-1</feedburner:origLink></entry><entry><title type="html">How to create Quarkus Command Mode applications</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rZKO1Wc44K0/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/soa-cloud/quarkus/how-to-create-quarkus-command-mode-applications/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=how-to-create-quarkus-command-mode-applications</id><updated>2021-10-18T09:36:57Z</updated><content type="html">Quarkus is set of technologies to develop an entire Microservice architecture. The foundation of this architecture is typically an HTTP server, serving REST Endpoints. It is however also possible to create powerful Java scripts using Quarkus advanced sets of APIs. In this tutorial we will learn how to create standalone Quarkus applications with a bare ... The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rZKO1Wc44K0" height="1" width="1" alt=""/&gt;</content><dc:creator>F.Marchioni</dc:creator><feedburner:origLink>http://www.mastertheboss.com/soa-cloud/quarkus/how-to-create-quarkus-command-mode-applications/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=how-to-create-quarkus-command-mode-applications</feedburner:origLink></entry><entry><title>Announcing Cryostat 2.0: JDK Flight Recorder for containers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Pm6JlnaXKVk/announcing-cryostat-20-jdk-flight-recorder-containers" /><author><name>Andrew Azores, Janelle Law, Hareet Dhillon</name></author><id>492172b0-3388-4006-aae4-c41b855e3698</id><updated>2021-10-18T07:00:00Z</updated><published>2021-10-18T07:00:00Z</published><summary type="html">&lt;p&gt;Cryostat is a container-native JVM application that provides a secure API for profiling and monitoring &lt;a href="https://developers.redhat.com/topics/containers"&gt;containers&lt;/a&gt; with &lt;a href="https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u"&gt;JDK Flight Recorder&lt;/a&gt; (JFR). JDK Flight Recorder collects profiling and diagnostic data from applications using JFR events stored in binary flight recordings. When requested, Cryostat can retrieve, store, and analyze flight recordings from containerized Java virtual machines (JVMs) to assess overall application health. Users can download recording files and upload them to &lt;a href="https://www.oracle.com/java/technologies/jdk-mission-control.html"&gt;JDK Mission Control&lt;/a&gt; (JMC) or &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt; for further analysis.&lt;/p&gt; &lt;p&gt;This article introduces Cryostat and shares new features in the 2.0 release, including example use cases, tips for getting started, and additional release notes. For more information about Cryostat fundamentals, visit &lt;a href="https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers#"&gt;Introduction to Cryostat: JDK Flight Recorder for containers&lt;/a&gt;.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: Cryostat 2.0 is currently in tech preview for &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; and other &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;  platforms. The&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; Red Hat build of Cryostat 2.0 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;includes the &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a data-saferedirecturl="https://www.google.com/url?q=https://catalog.redhat.com/software/operators/detail/60ee049a744684587e218ef5&amp;amp;source=gmail&amp;amp;ust=1634667555133000&amp;amp;usg=AFQjCNGZvnLPLKy_92Zc1FbyHT5Iwsv6Lg" href="https://catalog.redhat.com/software/operators/detail/60ee049a744684587e218ef5" target="_blank"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Cryostat Operator&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; to simplify and automate Cryostat deployments on &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;OpenShift&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Using Cryostat with JDK Flight Recorder&lt;/h2&gt; &lt;p&gt;Cryostat is compatible with JVMs that (1) can accept incoming JMX connections, and (2) include JDK Flight Recorder. This includes OpenJDK and most downstream builds or distributions of OpenJDK, such as &lt;a href="https://developers.redhat.com/products/openjdk/download"&gt;Red Hat OpenJDK&lt;/a&gt; and &lt;a href="https://adoptium.net/"&gt;Adoptium OpenJDK&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The JDK Mission Control desktop-only application requires users to retrieve flight recordings on a local disk. When bare-metal JDK Flight Recorder writes recordings to the local file system inside a container, those recordings are lost when the container restarts. A complicated and likely insecure workaround would involve establishing a direct connection between a desktop workstation and the containerized JVMs in the cloud over Java Management Extensions (JMX).&lt;/p&gt; &lt;p&gt;Cryostat securely retrieves and stores flight recordings from containerized JVMs, so users can access these recordings over HTTP/HTTPS. Cryostat’s low overhead during both profiling and continuous monitoring allows users to monitor application performance in production. Users can start recordings with built-in or custom &lt;a href="https://github.com/cryostatio/cryostat#event-templates"&gt;event templates&lt;/a&gt; in multiple JVMs at once.&lt;/p&gt; &lt;h2&gt;Use cases for Cryostat 2.0&lt;/h2&gt; &lt;p&gt;Example use cases for Cryostat 2.0 include automated rules, batch retrieval of JDK Flight Recorder data, and custom target definitions and support for non-RMI JMX connectors. We'll write more about each of these use cases in future articles.&lt;/p&gt; &lt;h2&gt;Highlights of the 2.0 release&lt;/h2&gt; &lt;p&gt;We've added the following major new features in Cryostat 2.0:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Cryostat Operator: Cryostat is now offered as an OpenShift Operator, also in tech preview, available from the OperatorHub on OpenShift 4.6 and higher. The Cryostat Operator eases configuration and deployment of Cryostat into your OpenShift namespaces and provides an OpenShift custom resource interface to the Cryostat API, enabling you to build more integrations with other OpenShift Operators and services in more flexible ways.&lt;/li&gt; &lt;li&gt;Automated rules: A common use case for Cryostat is to enable continuous monitoring, or other JFR event templates, to all or some subset of JVMs in the target application. Automated rule definitions allow users to specify what kinds of JVMs should be triggered on—using criteria like port number, OpenShift annotations, OpenShift labels, or JVM alias—along with what kind of JDK Flight Recorder events should be recorded, and how often the JFR data should be copied from each target into the Cryostat archive.&lt;/li&gt; &lt;li&gt;Batch operations: Another common use case for Cryostat is to retrieve all JFR data from a set of target JVMs when some external event occurs. In Cryostat 1.0, a client would need to observe the external event and then fire &lt;em&gt;N&lt;/em&gt; HTTP requests to Cryostat to retrieve JFR data from each of the &lt;em&gt;N&lt;/em&gt; target applications. In Cryostat 2.0, a shorthand allows clients to fire one HTTP request and prompt Cryostat to retrieve data from a set of targets into the Cryostat archives. The client can then download the JFR data from Cryostat as needed.&lt;/li&gt; &lt;li&gt;Custom targets: Users can now create target definitions manually, rather than relying upon Cryostat's platform-tailored JVM discovery mechanisms.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Keep an eye out for upcoming articles highlighting and demonstrating these features.&lt;/p&gt; &lt;h2&gt;How to get started with Cryostat 2.0&lt;/h2&gt; &lt;p&gt;Install the Cryostat Operator to deploy Cryostat on OpenShift or another Kubernetes cluster. Check out the following links for installation and usage instructions:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;The recommended installation guide at &lt;a href="https://cryostat.io"&gt;cryostat.io&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Our guide to &lt;a href="https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers#manual_cryostat_installation_and_setup"&gt;manual Cryostat installation and setup&lt;/a&gt; for testing and demonstration purposes.&lt;/li&gt; &lt;li&gt;&lt;a href="https://cryostat.io/getting-started/"&gt;Getting started with the Cryostat web UI&lt;/a&gt; at cryostat.io.&lt;/li&gt; &lt;li&gt;The Cryostat API usage guide: &lt;a href="https://github.com/cryostatio/cryostat/tree/v2/HTTP_API.md"&gt;HTTP_API.md&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;The &lt;a href="https://github.com/cryostatio/cryostat/tree/v2/README.md"&gt;Cryostat README&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Additional 2.0 features&lt;/h2&gt; &lt;p&gt;There are a few other minor new features in Cryostat 2.0:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/cryostatio/cryostat#jmx-connectors"&gt;Client-defined connection protocols&lt;/a&gt;: Allow Cryostat to communicate with target JVMs using different JMX protocol implementations (see &lt;a href="https://github.com/cryostatio/cryostat/pull/482"&gt;pull request #482&lt;/a&gt; for details).&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/cryostatio/cryostat/blob/main/HTTP_API.md#certificateposthandler"&gt;POST /api/v2/certificates&lt;/a&gt;: Upload an SSL certificate to trust when connecting to target JVMs.&lt;/li&gt; &lt;li&gt;&lt;code&gt;GET /api&lt;/code&gt;: List all API operations.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/cryostatio/cryostat/blob/main/HTTP_API.md#notificationsurlgethandler"&gt;Push notifications for Cryostat operations&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Breaking changes since Cryostat 1.0&lt;/h2&gt; &lt;p&gt;The Cryostat 2.0 release brings some breaking changes since version 1.0. We felt these changes were necessary as Cryostat matures into a full-fledged product that can best serve our users’ diverse needs.&lt;/p&gt; &lt;h3&gt;Removal of the interactive command channel&lt;/h3&gt; &lt;p&gt;The interactive command channel has been replaced with a one-way WebSocket notifications channel. Cryostat was initially implemented as an interactive-mode utility with user actions limited to a set of pre-defined commands. This functionality was later extended to allow remote network access using WebSocket, resulting in the command channel. However, now that all of the command channel functionality has been ported over to the HTTP API, the channel has been adapted to instead provide one-way notifications to any targets connected to the Cryostat instance.&lt;/p&gt; &lt;h3&gt;Removal of event specifier strings&lt;/h3&gt; &lt;p&gt;Previously, users were able to specify JDK Flight Recorder events to be monitored during a recording using event specifier string syntax (such as &lt;code&gt;jdk.SomeEvent:optionName=value;jdk.AnotherEvent:secondOption=value2;...)&lt;/code&gt;. Now, you can specify events during recording creation by providing the JDK Flight Recorder event template name. Users can pick from a variety of standard templates or upload their own custom templates to Cryostat. Because they consist of XML, templates are easier to create, edit, validate, and share, and are also interoperable, as they are the standard JDK format.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;The tech preview release of Cryostat 2.0 lets you monitor containerized JVMs on an OpenShift or Kubernetes cluster. Furthermore, you can create, manage, and download JDK Flight Recorder recordings for analysis in &lt;a href="https://www.oracle.com/java/technologies/jdk-mission-control.html"&gt;JDK Mission Control&lt;/a&gt; or &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt;. To learn more about Cryostat 2.0, visit the Cryostat homepage, &lt;a href="https://cryostat.io"&gt;cryostat.io&lt;/a&gt;, and feel free to join our &lt;a href="https://groups.google.com/g/cryostat-development"&gt;mailing list&lt;/a&gt; to connect to the upstream community.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/18/announcing-cryostat-20-jdk-flight-recorder-containers" title="Announcing Cryostat 2.0: JDK Flight Recorder for containers"&gt;Announcing Cryostat 2.0: JDK Flight Recorder for containers&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Pm6JlnaXKVk" height="1" width="1" alt=""/&gt;</summary><dc:creator>Andrew Azores, Janelle Law, Hareet Dhillon</dc:creator><dc:date>2021-10-18T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/18/announcing-cryostat-20-jdk-flight-recorder-containers</feedburner:origLink></entry><entry><title type="html">Open Source Day 2021 Recap</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/s5fXYfgjvkg/" /><author><name>Farah Juma</name></author><id>https://wildfly-security.github.io/wildfly-elytron/blog/open-source-day-recap/</id><updated>2021-10-18T00:00:00Z</updated><dc:creator>Farah Juma</dc:creator><summary type="html">&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/s5fXYfgjvkg" height="1" width="1" alt=""/&gt;</summary><feedburner:origLink>https://wildfly-security.github.io/wildfly-elytron/blog/open-source-day-recap/</feedburner:origLink></entry></feed>
